name: Create Release

on:
  push:
    tags:
      - 'v*' # Запускать workflow при создании тега, начинающегося с 'v'

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Release]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30

    steps:
    - uses: actions/checkout@v4

    - name: Verify required files
      shell: bash
      run: |
        if [ ! -f LICENSE ] || [ ! -f License.rtf ]; then
          echo "::error::LICENSE and License.rtf files are required!"
          exit 1
        fi

    - name: Install dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y --no-install-recommends \
          cmake \
          g++ \
          make \
          libfmt-dev \
          rpm \
          dpkg

    - name: Install dependencies (Windows)
      if: matrix.os == 'windows-latest'
      uses: microsoft/setup-msbuild@v2
      with:
        vs-version: '17.0'

    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew update
        brew install cmake fmt

    - name: Configure Project
      shell: bash
      run: |
        mkdir -p build
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          cmake -S . -B build -G "Visual Studio 17 2022" -A x64 -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        else
          cmake -S . -B build -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        fi

    - name: Build Project
      shell: bash
      run: |
        cmake --build build --config ${{ matrix.build_type }} --parallel 4

    - name: Generate packages
      shell: bash
      run: |
        cd build
        if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
          # Генерация DEB и RPM пакетов
          cpack -G "DEB;RPM"
          echo "Generated packages:"
          ls -la *.deb *.rpm || echo "No Linux packages generated"
        elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          # Генерация MSI пакета
          cpack -G WIX -C ${{ matrix.build_type }}
          echo "Generated packages:"
          ls -la *.msi || echo "No Windows package generated"
        else
          # Генерация DMG пакета для macOS
          cpack -G DragNDrop
          echo "Generated packages:"
          ls -la *.dmg || echo "No macOS package generated"
        fi

    - name: Create source archives
      shell: bash
      run: |
        git archive --format=zip --output=build/source-code.zip HEAD
        git archive --format=tar.gz --output=build/source-code.tar.gz HEAD
        echo "Source archives:"
        ls -la build/source-code.*

    - name: Verify artifacts
      shell: bash
      run: |
        echo "Artifacts in build directory:"
        ls -la build/*

    - name: Create GitHub Release
      id: create_release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/v')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        name: Release ${{ github.ref }}
        body: |
          Automated release for ${{ github.ref }}
          Packages included:
          - Linux: DEB and RPM
          - Windows: MSI
          - macOS: DMG
          - Source archives
        draft: false
        prerelease: false
        files: |
          build/*.deb
          build/*.rpm
          build/*.msi
          build/*.dmg
          build/source-code.zip
          build/source-code.tar.gz

    - name: Verify release creation
      if: always() && steps.create_release.outputs.id
      run: |
        echo "Release created successfully with ID: ${{ steps.create_release.outputs.id }}"
