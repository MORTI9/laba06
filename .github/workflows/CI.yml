name: Create Release

on:
  push:
    tags:
      - 'v*' # Запускать workflow при создании тэга, начинающегося с 'v'

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Release]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30

    steps:
    - uses: actions/checkout@v4

    - name: Verify LICENSE exists (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        if [ ! -f LICENSE ]; then
          echo "::error::LICENSE file is required!"
          exit 1
        fi

    - name: Verify LICENSE exists (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        if (!(Test-Path -Path LICENSE)) {
          Write-Error "LICENSE file is required!"
          exit 1
        }

    - name: Install dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y --no-install-recommends \
          cmake \
          g++ \
          make \
          libfmt-dev \
          rpm

    - name: Install dependencies (Windows)
      if: matrix.os == 'windows-latest'
      uses: microsoft/setup-msbuild@v2
      with:
        vs-version: '17.0'

    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew update
        brew install cmake fmt

    - name: Configure Project
      shell: bash
      run: |
        mkdir -p build
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          cmake -S . -B build -G "Visual Studio 17 2022" -A x64 -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        else
          cmake -S . -B build -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        fi

    - name: Build Project
      shell: bash
      run: |
        cmake --build build --config ${{ matrix.build_type }} --parallel 4

    - name: Generate packages
      shell: bash
      run: |
        cd build
        cpack -G ${{ matrix.os == 'ubuntu-latest' && 'DEB;RPM' || matrix.os == 'windows-latest' && 'WIX' || matrix.os == 'macos-latest' && 'DragNDrop' }}

    - name: Create source archives
      shell: bash
      run: |
        git archive --format=zip --output=source-code.zip HEAD
        git archive --format=tar.gz --output=source-code.tar.gz HEAD

    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/v')
      with:
        tag_name: ${{ github.ref }}
        name: Release ${{ github.ref }}
        body: Automated release for ${{ github.ref }}
        draft: false
        prerelease: false
        files: |
          build/*.deb
          build/*.rpm
          build/*.msi
          build/*.dmg
          source-code.zip
          source-code.tar.gz
